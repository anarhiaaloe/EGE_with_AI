import psycopg2
import os
import random
from dotenv import load_dotenv
from g4f.client import Client

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_connection():
    return psycopg2.connect(
        dbname="EGE",
        user="postgres",
        password=os.getenv('DB_PASS'),
        host="localhost",
        port="5432"
    )

# –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É
def get_random_task(task_number):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, question, answer FROM historia WHERE task_number = %s ORDER BY RANDOM() LIMIT 1;", (task_number,))
    row = cur.fetchone()
    cur.close()
    conn.close()
    return row  # (id, question, answer)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã ---
def main():
    print("üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä –ï–ì–≠!")
    task_number = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: ").strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not task_number.isdigit():
        print("‚ùå –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    task_number = int(task_number)

    task = get_random_task(task_number)
    if not task:
        print("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return

    task_id, question, correct_answer = task

    print("\nüìò –ó–∞–¥–∞–Ω–∏–µ:")
    print(question)
    print("\n‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç (–º–æ–∂–Ω–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π):")

    # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥
    user_answer_lines = []
    while True:
        line = input()
        if line == "":
            break
        user_answer_lines.append(line)
    user_answer = "\n".join(user_answer_lines)

    if not user_answer.strip():
        print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    print("\nü§ñ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)\n")

    # --- –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ g4f ---
    try:
        client = Client()
        prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏. –ü—Ä–æ–≤–µ–¥–∏ –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task_number}.

–ó–∞–¥–∞–Ω–∏–µ:
{question}

–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞:
{user_answer}

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
{correct_answer}

–¢—Ä–µ–±—É–µ—Ç—Å—è:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ï–ì–≠.
2. –û–±—ä—è—Å–Ω–∏—Ç—å, –≥–¥–µ –æ–Ω –ø—Ä–∞–≤ –∏ –≥–¥–µ –æ—à–∏–±—Å—è.
3. –£–∫–∞–∑–∞—Ç—å, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏ –≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. (–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π - —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º)
4. –î–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏—Ç–æ–≥–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç.
–ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω –ø–æ–ª–Ω—ã–π –∞–±—Å—É—Ä–¥ –Ω–∏–∫–∞–∫ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–π—Å—è –∫ —Ç–µ–º–µ, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–π—Ç–∏ –∞–±—Å—É—Ä–¥–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –ø–æ–ª—å–∑—É —Ç–æ–≥–æ —á—Ç–æ —É—á–µ–Ω–∏–∫ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –Ω–∞–∏–≤—ã—Å—à–µ–π –æ—Ü–µ–Ω–∫–∏. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—Ç—å –±–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–º–µ—à–Ω–æ
"""

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
        )

        print("üìä –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞:\n")
        print(response.choices[0].message.content.strip())

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é: {e}")

if __name__ == "__main__":
    main()
