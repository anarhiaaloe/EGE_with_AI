import flet as ft
import psycopg2
import os
import random
from dotenv import load_dotenv
from g4f.client import Client

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º .env ---
load_dotenv()

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
def get_connection():
    return psycopg2.connect(
        dbname="EGE",
        user="postgres",
        password=os.getenv('DB_PASS'),
        host="localhost",
        port="5432"
    )

def get_available_task_numbers(subject):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute(f"SELECT DISTINCT task_number FROM {subject} ORDER BY task_number;")
    numbers = [row[0] for row in cur.fetchall()]
    cur.close()
    conn.close()
    return numbers

def get_random_task(subject, task_number):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute(f"SELECT question, answer FROM {subject} WHERE task_number = %s ORDER BY RANDOM() LIMIT 1;", (task_number,))
    row = cur.fetchone()
    cur.close()
    conn.close()
    return row if row else None


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main(page: ft.Page):
    page.title = "–¢—Ä–µ–Ω–∞–∂—ë—Ä –ï–ì–≠"
    page.window_width = 600
    page.window_height = 700
    page.vertical_alignment = ft.MainAxisAlignment.CENTER
    page.theme_mode = ft.ThemeMode.LIGHT
    page.scroll = ft.ScrollMode.ADAPTIVE

    # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state = {
        "subject": None,
        "task_number": None,
        "question": None,
        "correct_answer": None,
        "user_answer": None,
        "analysis": None
    }

    # ------------------------- –≠–ö–†–ê–ù–´ -------------------------
    def show_main():
        page.clean()
        page.add(
            ft.Column(
                [
                    ft.Text("–¢—Ä–µ–Ω–∞–∂—ë—Ä –ï–ì–≠", size=32, weight=ft.FontWeight.BOLD),
                    ft.Text("–ü—Ä–∞–∫—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ï–ì–≠.", size=16),
                    ft.ElevatedButton("–ù–∞—á–∞—Ç—å", on_click=lambda e: show_subjects(), width=200),
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            )
        )

    def show_subjects():
        page.clean()
        page.add(
            ft.Column(
                [
                    ft.Text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", size=26, weight=ft.FontWeight.BOLD),
                    ft.ElevatedButton("–ò—Å—Ç–æ—Ä–∏—è", on_click=lambda e: select_subject("historia"), width=250),
                    ft.ElevatedButton("–ù–∞–∑–∞–¥", on_click=lambda e: show_main(), width=150),
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            )
        )

    def select_subject(subject):
        state["subject"] = subject
        show_task_numbers()

    def show_task_numbers():
        page.clean()
        task_numbers = get_available_task_numbers(state["subject"])
        buttons = [
            ft.ElevatedButton(
                f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{num}",
                width=200,
                on_click=lambda e, n=num: select_task(n)
            )
            for num in task_numbers
        ]

        page.add(
            ft.Column(
                [
                    ft.Text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è", size=24, weight=ft.FontWeight.BOLD),
                    ft.Column(buttons, scroll=ft.ScrollMode.AUTO),
                    ft.ElevatedButton("–ù–∞–∑–∞–¥", on_click=lambda e: show_subjects(), width=150),
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            )
        )

    def select_task(task_number):
        state["task_number"] = task_number
        task = get_random_task(state["subject"], task_number)
        if not task:
            page.snack_bar = ft.SnackBar(ft.Text("‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞"))
            page.snack_bar.open = True
            page.update()
            return
        state["question"], state["correct_answer"] = task
        show_question()

    def show_question():
        page.clean()
        answer_input = ft.TextField(
            label="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç...",
            multiline=True,
            min_lines=5,
            max_lines=10,
            width=500
        )

        def on_send(e):
            user_text = answer_input.value.strip()
            if not user_text:
                page.snack_bar = ft.SnackBar(ft.Text("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç!"))
                page.snack_bar.open = True
                page.update()
                return
            state["user_answer"] = user_text
            show_analysis()

        page.add(
            ft.Column(
                [
                    ft.Text(f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{state['task_number']}", size=20, weight=ft.FontWeight.BOLD),
                    ft.Text(state["question"], size=16),
                    answer_input,
                    ft.Row(
                        [
                            ft.ElevatedButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", on_click=on_send, width=150),
                            ft.ElevatedButton("–ù–∞–∑–∞–¥", on_click=lambda e: show_task_numbers(), width=150)
                        ],
                        alignment=ft.MainAxisAlignment.CENTER
                    )
                ],
                alignment=ft.MainAxisAlignment.START,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            )
        )

    def show_analysis():
        page.clean()
        progress = ft.ProgressRing()
        loading_text = ft.Text("ü§ñ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞...", size=18)
        page.add(ft.Column([progress, loading_text], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER))
        page.update()

        # –ê–Ω–∞–ª–∏–∑ –≤ —Ñ–æ–Ω–µ
        def analyze():
            try:
                client = Client()
                prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏. –ü—Ä–æ–≤–µ–¥–∏ –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{state['task_number']}.

–ó–∞–¥–∞–Ω–∏–µ:
{state['question']}

–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞:
{state['user_answer']}

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
{state['correct_answer']}

–¢—Ä–µ–±—É–µ—Ç—Å—è:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ï–ì–≠.
2. –û–±—ä—è—Å–Ω–∏—Ç—å, –≥–¥–µ –æ–Ω –ø—Ä–∞–≤ –∏ –≥–¥–µ –æ—à–∏–±—Å—è.
3. –£–∫–∞–∑–∞—Ç—å, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
4. –î–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å.
"""
                response = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{"role": "user", "content": prompt}],
                )
                state["analysis"] = response.choices[0].message.content.strip()
            except Exception as e:
                state["analysis"] = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

            page.clean()
            page.add(
                ft.Column(
                    [
                        ft.Text("üìä –†–∞–∑–±–æ—Ä –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞", size=22, weight=ft.FontWeight.BOLD),
                        ft.Text(state["analysis"], size=16, selectable=True),
                        ft.Row(
                            [
                                ft.ElevatedButton("–ù–∞–∑–∞–¥", on_click=lambda e: show_question(), width=150),
                                ft.ElevatedButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", on_click=lambda e: show_main(), width=150)
                            ],
                            alignment=ft.MainAxisAlignment.CENTER
                        )
                    ],
                    scroll=ft.ScrollMode.ADAPTIVE,
                    alignment=ft.MainAxisAlignment.START,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                )
            )
            page.update()

        page.run_task(analyze)

    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω
    show_main()

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    ft.app(target=main)
